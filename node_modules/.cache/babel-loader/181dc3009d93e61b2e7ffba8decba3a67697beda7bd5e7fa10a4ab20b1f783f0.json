{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/WEB DEVELOPMENT/redux/src/ChatGpt.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// import openai\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGpt = () => {\n  _s();\n  //   openai.api_key = \"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\";\n  const [chatHistory, setChatHistory] = useState();\n  const handleMessage = async () => {\n    const response = await axios.post(\"https://api.openai.com/v1/engines/davinci-codex/completions\", {\n      prompt: \"Hello, World!\",\n      max_tokens: 5\n    }, {\n      headers: {\n        Authorization: `Bearer YOUR_API_KEY_HERE`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(response.data.choices[0].text);\n  };\n\n  //   const handleMessage = async (message) => {\n  //     const response = await openai.Completion.create({\n  //       engine: \"text-davinci-002\",\n  //       prompt: message,\n  //       maxTokens: 150,\n  //       n: 1,\n  //       stop: [\"\\n\"],\n  //       temperature: 0.7,\n  //     });\n\n  //     setChatHistory((chatHistory) => [\n  //       ...chatHistory,\n  //       { user: true, text: message },\n  //     ]);\n  //     setChatHistory((chatHistory) => [\n  //       ...chatHistory,\n  //       { user: false, text: response.choices[0].text },\n  //     ]);\n  //   };\n\n  useEffect(() => {\n    console.log(chatHistory);\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleMessage(\"Who is the fastest man alive\"),\n      children: \"Handle Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGpt, \"HV3jal3zFsL2NPSHoMygm8CeHMI=\");\n_c = ChatGpt;\nexport default ChatGpt;\nvar _c;\n$RefreshReg$(_c, \"ChatGpt\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","ChatGpt","_s","chatHistory","setChatHistory","handleMessage","response","post","prompt","max_tokens","headers","Authorization","console","log","data","choices","text","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/WEB DEVELOPMENT/redux/src/ChatGpt.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import openai\nimport axios from \"axios\";\nconst ChatGpt = () => {\n  //   openai.api_key = \"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\";\n  const [chatHistory, setChatHistory] = useState();\n\n  const handleMessage = async () => {\n    const response = await axios.post(\n      \"https://api.openai.com/v1/engines/davinci-codex/completions\",\n      {\n        prompt: \"Hello, World!\",\n        max_tokens: 5,\n      },\n      {\n        headers: {\n          Authorization: `Bearer YOUR_API_KEY_HERE`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    console.log(response.data.choices[0].text);\n  };\n\n  //   const handleMessage = async (message) => {\n  //     const response = await openai.Completion.create({\n  //       engine: \"text-davinci-002\",\n  //       prompt: message,\n  //       maxTokens: 150,\n  //       n: 1,\n  //       stop: [\"\\n\"],\n  //       temperature: 0.7,\n  //     });\n\n  //     setChatHistory((chatHistory) => [\n  //       ...chatHistory,\n  //       { user: true, text: message },\n  //     ]);\n  //     setChatHistory((chatHistory) => [\n  //       ...chatHistory,\n  //       { user: false, text: response.choices[0].text },\n  //     ]);\n  //   };\n\n  useEffect(() => {\n    console.log(chatHistory);\n  }, [chatHistory]);\n\n  return (\n    <div>\n      <button onClick={() => handleMessage(\"Who is the fastest man alive\")}>\n        Handle Message\n      </button>\n    </div>\n  );\n};\n\nexport default ChatGpt;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AACA,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,EAAE;EAEhD,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAC/B,6DAA6D,EAC7D;MACEC,MAAM,EAAE,eAAe;MACvBC,UAAU,EAAE;IACd,CAAC,EACD;MACEC,OAAO,EAAE;QACPC,aAAa,EAAG,0BAAyB;QACzC,cAAc,EAAE;MAClB;IACF,CAAC,CACF;IAEDC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAACQ,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;EAC5C,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEApB,SAAS,CAAC,MAAM;IACdgB,OAAO,CAACC,GAAG,CAACV,WAAW,CAAC;EAC1B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,oBACEH,OAAA;IAAAiB,QAAA,eACEjB,OAAA;MAAQkB,OAAO,EAAEA,CAAA,KAAMb,aAAa,CAAC,8BAA8B,CAAE;MAAAY,QAAA,EAAC;IAEtE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAS;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV,CAAC;AAACpB,EAAA,CArDID,OAAO;AAAAsB,EAAA,GAAPtB,OAAO;AAuDb,eAAeA,OAAO;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}