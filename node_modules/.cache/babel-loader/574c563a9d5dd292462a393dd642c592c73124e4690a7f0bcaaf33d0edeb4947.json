{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/WEB DEVELOPMENT/redux/src/ChatGpt.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGpt = () => {\n  _s();\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInput, setUserInput] = useState();\n  const API_KEY = \"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\";\n  const configuration = new Configuration({\n    apiKey: API_KEY\n  });\n  const openai = new OpenAIApi(configuration);\n  const handleMessage = async event => {\n    event.preventDefault();\n    setChatHistory(chatHistory => [...chatHistory, {\n      user: true,\n      text: userInput\n    }]);\n    try {\n      var _completion$data;\n      const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: userInput,\n        max_tokens: 150\n      });\n      console.log((_completion$data = completion.data) === null || _completion$data === void 0 ? void 0 : _completion$data.choices[0]);\n      setChatHistory(chatHistory => [...chatHistory, {\n        user: false,\n        text: completion.data.choices[0].text\n      }]);\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.status);\n        console.log(error.response.data);\n      } else {\n        console.log(error.message);\n      }\n    }\n  };\n  useEffect(() => {\n    console.log(chatHistory);\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: chatHistory.map(chat => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: event => setUserInput(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGpt, \"JHkT/qNgG+fpvADg1prJb0AowB0=\");\n_c = ChatGpt;\nexport default ChatGpt;\nvar _c;\n$RefreshReg$(_c, \"ChatGpt\");","map":{"version":3,"names":["React","useEffect","useState","Configuration","OpenAIApi","axios","jsxDEV","_jsxDEV","ChatGpt","_s","chatHistory","setChatHistory","userInput","setUserInput","API_KEY","configuration","apiKey","openai","handleMessage","event","preventDefault","user","text","_completion$data","completion","createCompletion","model","prompt","max_tokens","console","log","data","choices","error","response","status","message","children","map","chat","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/WEB DEVELOPMENT/redux/src/ChatGpt.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport axios from \"axios\";\n\nconst ChatGpt = () => {\n  const [chatHistory, setChatHistory] = useState([]);\n  const [userInput, setUserInput] = useState();\n  const API_KEY = \"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\";\n\n  const configuration = new Configuration({\n    apiKey: API_KEY,\n  });\n\n  const openai = new OpenAIApi(configuration);\n\n  const handleMessage = async (event) => {\n    event.preventDefault();\n\n    setChatHistory((chatHistory) => [\n      ...chatHistory,\n      { user: true, text: userInput },\n    ]);\n\n    try {\n      const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: userInput,\n        max_tokens: 150,\n      });\n      console.log(completion.data?.choices[0]);\n      setChatHistory((chatHistory) => [\n        ...chatHistory,\n        { user: false, text: completion.data.choices[0].text },\n      ]);\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.status);\n        console.log(error.response.data);\n      } else {\n        console.log(error.message);\n      }\n    }\n  };\n\n  useEffect(() => {\n    console.log(chatHistory);\n  }, [chatHistory]);\n\n  return (\n    <div>\n      <ul>\n        {chatHistory.map((chat) => {\n          return <li></li>;\n        })}\n      </ul>\n      <form onSubmit={handleMessage}>\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(event) => setUserInput(event.target.value)}\n        />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatGpt;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}