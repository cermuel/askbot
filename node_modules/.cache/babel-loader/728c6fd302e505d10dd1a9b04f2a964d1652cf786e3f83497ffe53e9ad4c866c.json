{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/WEB DEVELOPMENT/redux/src/ChatGpt.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// import openai\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGpt = () => {\n  _s();\n  //   openai.api_key = \"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\";\n  const [chatHistory, setChatHistory] = useState();\n  const handleMessage = async message => {\n    const response = await openai.Completion.create({\n      engine: \"text-davinci-002\",\n      prompt: message,\n      maxTokens: 150,\n      n: 1,\n      stop: [\"\\n\"],\n      temperature: 0.7\n    });\n    setChatHistory(chatHistory => [...chatHistory, {\n      user: true,\n      text: message\n    }]);\n    setChatHistory(chatHistory => [...chatHistory, {\n      user: false,\n      text: response.choices[0].text\n    }]);\n  };\n  useEffect(() => {\n    console.log(chatHistory);\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleMessage(\"Who is the fastest man alive\"),\n      children: \"Handle Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGpt, \"HV3jal3zFsL2NPSHoMygm8CeHMI=\");\n_c = ChatGpt;\nexport default ChatGpt;\nvar _c;\n$RefreshReg$(_c, \"ChatGpt\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ChatGpt","_s","chatHistory","setChatHistory","handleMessage","message","response","openai","Completion","create","engine","prompt","maxTokens","n","stop","temperature","user","text","choices","console","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/WEB DEVELOPMENT/redux/src/ChatGpt.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n// import openai\n\nconst ChatGpt = () => {\n  //   openai.api_key = \"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\";\n  const [chatHistory, setChatHistory] = useState();\n  const handleMessage = async (message) => {\n    const response = await openai.Completion.create({\n      engine: \"text-davinci-002\",\n      prompt: message,\n      maxTokens: 150,\n      n: 1,\n      stop: [\"\\n\"],\n      temperature: 0.7,\n    });\n\n    setChatHistory((chatHistory) => [\n      ...chatHistory,\n      { user: true, text: message },\n    ]);\n    setChatHistory((chatHistory) => [\n      ...chatHistory,\n      { user: false, text: response.choices[0].text },\n    ]);\n  };\n\n  useEffect(() => {\n    console.log(chatHistory);\n  }, [chatHistory]);\n\n  return (\n    <div>\n      <button onClick={() => handleMessage(\"Who is the fastest man alive\")}>\n        Handle Message\n      </button>\n    </div>\n  );\n};\n\nexport default ChatGpt;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,EAAE;EAChD,MAAMO,aAAa,GAAG,MAAOC,OAAO,IAAK;IACvC,MAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,UAAU,CAACC,MAAM,CAAC;MAC9CC,MAAM,EAAE,kBAAkB;MAC1BC,MAAM,EAAEN,OAAO;MACfO,SAAS,EAAE,GAAG;MACdC,CAAC,EAAE,CAAC;MACJC,IAAI,EAAE,CAAC,IAAI,CAAC;MACZC,WAAW,EAAE;IACf,CAAC,CAAC;IAEFZ,cAAc,CAAED,WAAW,IAAK,CAC9B,GAAGA,WAAW,EACd;MAAEc,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAEZ;IAAQ,CAAC,CAC9B,CAAC;IACFF,cAAc,CAAED,WAAW,IAAK,CAC9B,GAAGA,WAAW,EACd;MAAEc,IAAI,EAAE,KAAK;MAAEC,IAAI,EAAEX,QAAQ,CAACY,OAAO,CAAC,CAAC,CAAC,CAACD;IAAK,CAAC,CAChD,CAAC;EACJ,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACduB,OAAO,CAACC,GAAG,CAAClB,WAAW,CAAC;EAC1B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,oBACEH,OAAA;IAAAsB,QAAA,eACEtB,OAAA;MAAQuB,OAAO,EAAEA,CAAA,KAAMlB,aAAa,CAAC,8BAA8B,CAAE;MAAAiB,QAAA,EAAC;IAEtE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAS;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV,CAAC;AAACzB,EAAA,CAlCID,OAAO;AAAA2B,EAAA,GAAP3B,OAAO;AAoCb,eAAeA,OAAO;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}