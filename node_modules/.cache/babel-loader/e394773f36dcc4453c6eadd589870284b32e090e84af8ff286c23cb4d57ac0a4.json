{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/WEB DEVELOPMENT/redux/src/ChatGpt.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGpt = () => {\n  _s();\n  const [chatHistory, setChatHistory] = useState();\n  const API_KEY = \"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\";\n  const configuration = new Configuration({\n    apiKey: API_KEY\n  });\n  const openai = new OpenAIApi(configuration);\n  const handleMessage = async () => {\n    try {\n      const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: \"How old is the earth\"\n      });\n      console.log(completion.data.choices[0].text);\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.status);\n        console.log(error.response.data);\n      } else {\n        console.log(error.message);\n      }\n    }\n  };\n\n  //   const handleMessage = async (message) => {\n  //     const response = await openai.Completion.create({\n  //       engine: \"text-davinci-002\",\n  //       prompt: message,\n  //       maxTokens: 150,\n  //       n: 1,\n  //       stop: [\"\\n\"],\n  //       temperature: 0.7,\n  //     });\n\n  //     setChatHistory((chatHistory) => [\n  //       ...chatHistory,\n  //       { user: true, text: message },\n  //     ]);\n  //     setChatHistory((chatHistory) => [\n  //       ...chatHistory,\n  //       { user: false, text: response.choices[0].text },\n  //     ]);\n  //   };\n\n  useEffect(() => {\n    console.log(chatHistory);\n  }, [chatHistory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleMessage(\"Who is the fastest man alive\"),\n      children: \"Handle Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGpt, \"HV3jal3zFsL2NPSHoMygm8CeHMI=\");\n_c = ChatGpt;\nexport default ChatGpt;\nvar _c;\n$RefreshReg$(_c, \"ChatGpt\");","map":{"version":3,"names":["React","useEffect","useState","Configuration","OpenAIApi","axios","jsxDEV","_jsxDEV","ChatGpt","_s","chatHistory","setChatHistory","API_KEY","configuration","apiKey","openai","handleMessage","completion","createCompletion","model","prompt","console","log","data","choices","text","error","response","status","message","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/WEB DEVELOPMENT/redux/src/ChatGpt.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport axios from \"axios\";\n\nconst ChatGpt = () => {\n  const [chatHistory, setChatHistory] = useState();\n  const API_KEY = \"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\";\n\n  const configuration = new Configuration({\n    apiKey: API_KEY,\n  });\n\n  const openai = new OpenAIApi(configuration);\n\n  const handleMessage = async () => {\n    try {\n      const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: \"How old is the earth\",\n      });\n      console.log(completion.data.choices[0].text);\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.status);\n        console.log(error.response.data);\n      } else {\n        console.log(error.message);\n      }\n    }\n  };\n\n  //   const handleMessage = async (message) => {\n  //     const response = await openai.Completion.create({\n  //       engine: \"text-davinci-002\",\n  //       prompt: message,\n  //       maxTokens: 150,\n  //       n: 1,\n  //       stop: [\"\\n\"],\n  //       temperature: 0.7,\n  //     });\n\n  //     setChatHistory((chatHistory) => [\n  //       ...chatHistory,\n  //       { user: true, text: message },\n  //     ]);\n  //     setChatHistory((chatHistory) => [\n  //       ...chatHistory,\n  //       { user: false, text: response.choices[0].text },\n  //     ]);\n  //   };\n\n  useEffect(() => {\n    console.log(chatHistory);\n  }, [chatHistory]);\n\n  return (\n    <div>\n      <button onClick={() => handleMessage(\"Who is the fastest man alive\")}>\n        Handle Message\n      </button>\n    </div>\n  );\n};\n\nexport default ChatGpt;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,EAAE;EAChD,MAAMU,OAAO,GAAG,qDAAqD;EAErE,MAAMC,aAAa,GAAG,IAAIV,aAAa,CAAC;IACtCW,MAAM,EAAEF;EACV,CAAC,CAAC;EAEF,MAAMG,MAAM,GAAG,IAAIX,SAAS,CAACS,aAAa,CAAC;EAE3C,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,UAAU,GAAG,MAAMF,MAAM,CAACG,gBAAgB,CAAC;QAC/CC,KAAK,EAAE,kBAAkB;QACzBC,MAAM,EAAE;MACV,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAACL,UAAU,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;IAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,QAAQ,EAAE;QAClBN,OAAO,CAACC,GAAG,CAACI,KAAK,CAACC,QAAQ,CAACC,MAAM,CAAC;QAClCP,OAAO,CAACC,GAAG,CAACI,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAAC;MAClC,CAAC,MAAM;QACLF,OAAO,CAACC,GAAG,CAACI,KAAK,CAACG,OAAO,CAAC;MAC5B;IACF;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA5B,SAAS,CAAC,MAAM;IACdoB,OAAO,CAACC,GAAG,CAACZ,WAAW,CAAC;EAC1B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,oBACEH,OAAA;IAAAuB,QAAA,eACEvB,OAAA;MAAQwB,OAAO,EAAEA,CAAA,KAAMf,aAAa,CAAC,8BAA8B,CAAE;MAAAc,QAAA,EAAC;IAEtE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAS;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV,CAAC;AAAC1B,EAAA,CA1DID,OAAO;AAAA4B,EAAA,GAAP5B,OAAO;AA4Db,eAAeA,OAAO;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}